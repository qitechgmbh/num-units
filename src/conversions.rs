/// # Unit Conversions - Advanced Conversion System
///
/// This module provides a comprehensive trait-based conversion system that works
/// for both base units and derived units, using the FromUnit/IntoUnit
/// approach as the foundation.
///
/// ## Overview
///
/// The conversion system enables seamless conversion between different units
/// within the same dimension. It uses trait-based conversions that are
/// automatically generated by the unit definition macros.
///
/// ## Key Components
///
/// - **ConvertibleUnit Trait**: Extends Unit trait with conversion capabilities
/// - **FromUnit Trait**: Convert from any unit to its base unit
/// - **IntoUnit Trait**: Convert from base unit to any unit
/// - **Automatic Generation**: Conversion methods generated by macros
///
/// ## Architecture
///
/// The conversion system is built on three layers:
///
/// 1. **Base Conversions**: Direct conversions between related units
/// 2. **Trait System**: Generic conversion traits for type safety
/// 3. **Macro Generation**: Automatic generation of conversion methods
/// 4. **Type Safety**: Compile-time validation of conversions
///
/// ## Usage Patterns
///
/// ```rust
/// use num_units::length::Length;
/// use num_units::si::length::{Meter, Kilometer};
///
/// // Create quantities in different units
/// let meters = Length::from::<Meter>(1000.0);
/// let kilometers = Length::from::<Kilometer>(1.0);
///
/// // Automatic conversions between units
/// let meters_from_km = kilometers.to::<Meter>();  // Returns 1000.0
/// let km_from_meters = meters.to::<Kilometer>();  // Returns 1.0
///
/// // All conversions are type-safe and checked at compile time
/// ```

/// Trait for units that can be converted to/from base units
///
/// This trait extends the Unit trait with conversion capabilities
/// using the FromUnit/IntoUnit system.
pub trait ConvertibleUnit: crate::unit::Unit {
    /// The base unit for this unit's dimension
    type BaseUnit: crate::unit::Unit;

    /// Convert a value in this unit to its base unit
    fn to_base_unit<V>(value: V) -> V
    where
        V: num_traits::Num + Copy + From<f64> + num_traits::NumCast;

    /// Convert a value from this unit's base unit to this unit
    fn from_base_unit<V>(base_value: V) -> V
    where
        V: num_traits::Num + Copy + From<f64> + num_traits::NumCast;
}
